#export GITHUB_USER=

#
# Output color codes
#
export C_OK="\033[1;32m"                  # Green
export C_WARNING="\033[1;33m"             # Bold Yellow
export C_WARN="${C_WARNING}"              # ${C_WARNING}
export C_ALERT="\033[1;31m"               # Bold Red
export C_ERROR="\033[1;37m\033[41m"       # Bold White on red background
export C_TITLE="\033[1;37m\033[4;34m"     # Blue underligned
export C_UNDERLIGNED="\033[4;37m"         # White underligned
export C_BOLD="\033[1;37m"                # Bold White
export C_SCRIPT="\033[0;32m\033[0;100m"   # Distinguishing code to be run by user
export C_OFF="\033[0m"                    # Reset the color


#
# OS identification
#
uname_out="$(uname -s)"
case "${uname_out}" in
  Darwin*)
    export MACHINE="mac"
  ;;
  Linux*)
    [[ -n "$(command -v yum)" ]] && export MACHINE="redhat"
    [[ -n "$(command -v apt-get)" ]] && export MACHINE="debian"
    [[ -n "$(command -v zypper)" ]] && export MACHINE="suse"
  ;;
  *)
    export MACHINE=""
    echo -e "${C_ERROR}OS unmanaged: ${uname_out}${C_ERROR}"
  ;;
esac


#
# Aliases
#
[[ "${MACHINE}" == "mac" ]] && alias sed='gsed'


#
# Common Functions
#
function helper() {
  local _message=""

  if [[ " -h --help " == *" $1 "* ]]; then
    echo -e "  ${C_WARNING}💬 Different ways of calling it:${C_OFF}"
    echo -e "    ${C_SCRIPT}[[ \" -h --help \" == *\" \$1 \"* ]] && helper && return${C_OFF}"
    echo -e "    ${C_SCRIPT}[[ \" -h --help \" == *\" \$1 \"* ]] && helper \"Your function summary\" \"Arg1 summary\" \"ArgN summary [optional]\" && return${C_OFF}"
    echo -e "    ${C_SCRIPT}[[ \" -h --help \" == *\" \$1 \"* ]] && helper \"\" \"Arg1 summary\" \"ArgN summary [optional]\" && return${C_OFF}"
    return
  fi

  for arg do penultimate=$ultimate; ultimate=$arg; done; eval penultimate=\$$((#-1))
  if [[ $# -gt 0 ]]; then
    _message+="  ${C_WARNING}💬 ${@:1:1}${C_OFF}\n"
  else
    _message+="  ${C_WARNING}💬 no argument required${C_OFF}"
  fi
  if [[ $# -gt 1 ]]; then
    for ((i=1; i<$#; i++)); do
      _message+="    \$$i: ${@:$i+1:1}\n"
    done
  fi
  echo "$_message"
}

function log() {
  [[ " -h --help " == *" $1 "* ]] && helper "Logging to standard output with color" "<ok|warning|error|alert|title|underligned|script|arg>" "your messsage" && return
  
  case "$1" in
    "ok"|"OK")
      echo -e "${C_OK}$2${C_OFF}"
    ;;
    "warn"|"WARN"|"warning"|"WARNING")
      echo -e "${C_WARNING}$2${C_OFF}"
    ;;
    "question"|"QUESTION")
      echo -e "[☛] $2"
    ;;
    "info"|"INFO")
      echo -e "[⚑] $2"
    ;;
    "underligned"|"UNDERLIGNED")
      echo -e "${C_UNDERLIGNED}$2${C_OFF}"
    ;;
    "alert"|"ALERT")
      echo -e "${C_ALERT}[⚠︎] $2${C_OFF}"
    ;;
    "error"|"ERROR")
      echo -e "${C_ERROR}[✗] $2${C_OFF}"
    ;;
    "arg"|"ARG")
      echo -e "${C_ERROR}[✗] Something wrong in the arguments provided?${C_OFF}"
    ;;
    "critical"|"CRITICAL")
      echo -e "${c_error}[☠︎] $2${c_off}"
    ;;
    "title"|"TITLE")
      echo -e "${C_TITLE}$2${C_OFF}"
    ;;
    "script"|"SCRIPT")
      echo -e "${C_SCRIPT}$2${C_OFF}"
    ;;
    *)
      echo "$2"
    ;;
  esac
}


function helper_string_contains() {
  [[ " -h --help " == *" $1 "* ]] && helper "Check if a string contains a substring or regex. Return true if the string contains the substring/regex, false otherwise"
  local _my_string="$1"
  local _my_substring="$2"

  if [[ "${_my_string}" =~ "${_my_substring}" ]]; then
    echo true
  else
    echo false
  fi
}


function git_create_remote_repo() {
  [[ " -h --help " == *" $1 "* ]] && helper "Create a GitHub remote by calling the GitHub API" \
    "Repo fullname (shortname if you want a user repo)" \
    "visibility [PRIVATE/public]" \
  && return
  
  local _fullname
  local _shortname
  local _org
  [[ "$#" != 1 ]] && log arg && return 1
  if [[ "$1" == *"/"* ]]; then
    _fullname="$1"
    _shortname=$(basename "${_fullname}")
  else
    _shortname="$1"
    _fullname="${GITHUB_USER}/$_shortname"
  fi
  _org=$(dirname "${_fullname}")
  local _visibility="${2:-private}"
  if [[ "${_visibility}" == "private" ]]; then
    _visibility=true
  else
    _visibility=false
  fi

  [[ -z "${GITHUB_PAT}" ]] && log error "Read the code, you need a \$GITHU_PAT providing authentication againt the GitHub API"
  if [[ "$_org" == "${GITHUB_USER}" ]]; then
    echo Creating a User repo...
    #                                                       👇🏼 GITHUB_PAT: Personal Access Token stored in a password manager of your choice
    response=$(curl -s -H "Authorization: token $(eval "${GITHUB_PAT}")" --data '{"name": "'${_shortname}'", "private": '${_visibility}'}' https://api.github.com/user/repos)
  else
    echo Creating an Organization repo...
    response=$(curl -s -H "Authorization: token $(eval "${GITHUB_PAT}")" --data '{"name": "'${_shortname}'", "private": '${_visibility}'}' https://api.github.com/orgs/$_org/repos)
  fi
  echo ${response}
  if [[ ${response} == *"Repository creation failed"* ]]; then
    return 1
  else
    return 0
  fi
}


#
# yadm wrapping Functions
#

# Only there to summarize
function helper_yadm_functions() {
  log info "yadm cipher: add new content to be encrypted (supports 'Downloads/*', '!Downloads/logs', '!**.log')"
  log info "yadm decipher: remove content from the git-crypt encryption box (supports 'Downloads/*', '!Downloads/logs', '!**.log')"
  log info "yadm ls --help"
  log info "yadm add -u: stage to git all modified files at once"
  log info "yadm restore: map the git-restore command"
  log info "yadm unlock"
  log info "yadm open"
  echo
  log info "yadm_init"
  log info "yadm_setup"
  log info "yadm_destroy"
}


# Called from a git alias with: yadm cipher
yadm_cipher() {
  [[ " -h --help " == *" $1 "* ]] && helper "Add content to git-crypt encryption box on behalf of yadm" \
    "content - path provided must be relative to the HOME folder (supports 'Downloads/*', 'Downloads/**' '**.log' notations)" \
  && return
  local _content="${1?Arg content missing. What do you wanna cipher?}"
  if [[ "${_content}" == ".gitconfig" || "${_content}" == ".zaliases" ]]; then
    log alert "Trust me you don't wanna do this... If you encrypt your .gitconfig or yadm wrapping functions, how do you restore moron??"
    return
  fi
  if [[ "$(helper_string_contains "${_content}" "$HOME")" == true ]]; then
    _content="${_content#$HOME/}"
  fi
  if [[ "$(helper_string_contains "${_content}" "~")" == true ]]; then
    _content="${_content#"~/"}"
  fi
  local _git_file="$HOME/.gitattributes"
  local _check="${_content} filter"
  local _content_to_insert="${_content} filter=git-crypt diff=git-crypt"
  local _answer="n"

  if [[ "${_content}" == !* ]]; then
    log question "Negative (!) patterns are forbidden in git attributes. Do you want to fully exclude this content from yadm git repo (a .gitignore will be created)? [y/N] "
    helper_read _answer;
    if [[ "${_answer}" == "y" ]]; then
      _git_file="$HOME/.gitignore"
      if [[ ! -f "${_git_file}" ]]; then
        echo -e "# Yadm Management\n" > "${_git_file}"
      fi
      _check="${_content#"!"}"
      _content_to_insert="${_content#"!"}"

      if [[ "${_content}" == *'/*' && -n "$(grep -F "${_check}*" "${_git_file}")" ]]; then
        log alert "No need to add this pattern as your already have a '/**' equivalent"
        return
      fi
    else
      return
    fi
  else
    if [[ "${_content}" == *'/*' && -n "$(grep -F "${_content}* filter" "${_git_file}")" ]]; then
      log alert "No need to add this pattern as your already have a '/**' equivalent"
      return
    fi
  fi

  if [[ -z "$(grep -F "${_check}" "${_git_file}")" ]]; then
    local _content_for_git="${${_content%"/**"}%"/*"}"
    log title "Before:"; cat "${_git_file}"; echo
    chmod 644 "${_git_file}"
    echo -e "${_content_to_insert}" >> "${_git_file}"
    sed -i -e '/^$/d' "${_git_file}" # remove blank lines
    chmod 444 "${_git_file}"
    if [[ "${_git_file}" == "$HOME/.gitattributes" ]]; then
      echo yadm add ${_content_for_git}
      yadm add "${_content_for_git}"
    fi
    echo; log title "After:"; cat "${_git_file}"
    yadm add "${_git_file}"
    echo; log title "Don't forget to commit" && yadm status
  fi
}


# Called from a git alias with: yadm decipher
yadm_decipher() {
  [[ " -h --help " == *" $1 "* ]] && helper "Remove content from git-crypt encryption box on behalf of yadm" \
    "content - path provided must be relative to the HOME folder (supports 'Downloads/*', '!Downloads/logs', '!**.log' notations)" \
  && return
  local _content="${1?Arg content missing. What do you wanna cipher?}"
  if [[ "${_content}" == !* ]]; then
    log alert "Negative (!) patterns are forbidden in git attributes. Please double-check or edit your .gitattributes manually with 'yadm ls -e'."
    return
  fi
  if [[ "$(helper_string_contains "${_content}" "$HOME")" == true ]]; then
    _content="${_content#$HOME/}"
  fi
  if [[ "$(helper_string_contains "${_content}" "~")" == true ]]; then
    _content="${_content#"~/"}"
  fi
  local _git_file="$HOME/.gitattributes"
  local _check="${_content} filter"
  local _content_to_remove="${_content} filter=git-crypt diff=git-crypt"

  if [[ -n "$(grep -F "${_check}" "${_git_file}")" ]]; then
    local _content_for_git="${${_content%"/**"}%"/*"}"
    local _content_for_sed="$(printf %q "${_content} filter")" # Preprocessing by backslashing all sed meta-characters
    log title "Before:"; cat "${_git_file}"; echo
    chmod 644 "${_git_file}"
    sed -i -e "s:^${_content_for_sed}.*::" "${_git_file}"
    sed -i -e '/^$/d' "${_git_file}" # remove blank lines
    chmod 444 "${_git_file}"
    if [[ "$(helper_string_contains "${_content}" "/\*")" == true ]]; then
      echo yadm rm --cache -r ${_content_for_git}
      yadm rm --cache -r "${_content_for_git}"
    else
      echo yadm rm --cache ${_content_for_git}
      yadm rm --cache "${_content_for_git}"
    fi
    echo; log title "After:"; cat "${_git_file}"
    yadm add "${_git_file}"
    echo; log title "Don't forget to commit" && yadm status
  fi
}


# Called from a git alias with: yadm ls
yadm_ls() {
  [[ " -h --help " == *" $1 "* ]] && helper "List yadm encrypted files by default (arg optional)" \
    "[-e|--edit]:open the file in your EDITOR [-c|--cleartext]:to output unencrypted files" \
  && return

  case "$1" in
    "-c"*|"--cleartext"*  )
      yadm list -a # instead of 'list' which output only the current dir staged files
    ;;
    "-e"*|"--edit"*  )
      chmod 644 ~/.gitattributes
      $EDITOR --wait ~/.gitattributes
      chmod 444 ~/.gitattributes
    ;;
    *)
      log title "Registered for encryption:"
      cat ~/.gitattributes
      if [[ -f "$HOME/.gitignore" ]]; then
        log title "Content ignored:"
        cat ~/.gitignore
      fi
    ;;
  esac
  
  echo
  helper_yadm_functions
}


# Called from a git alias with: yadm unlock
yadm_unlock() {
  [[ " -h --help " == *" $1 "* ]] && helper "Unlock, after recent cloning, a yadm git-crypt based on the symmetric key initially stored in your password manager" \
  && return

  if [[ -n "$(which -d xxd)" ]]; then
    local _pwd="$(lpass show --sync=now --field=Token 'IT/yadm key')"
    yadm git-crypt unlock <(printf "${_pwd}" | xxd -p -r)
  else
    log error "You need to instal xxd and maybe lpass"
  fi
}


# Not exposed via a git alias, it's up to you
function yadm_init() {
  [[ " -h --help " == *" $1 "* ]] && helper "Init your yadm config, create the GitHub private remote and push an initial" \
    "repo fullname (shortname if you want a user repo)" \
  && return
  
  [[ -z "${GITHUB_USER}" ]] && log error "You need to create a \$GITHUB_USER."

  local _repo_name="${1?Repo fullname missing}"
  local _default_branch="${2:-main}" # being opinionated on this, no need to expose it, use main

  local _fullname
  local _shortname
  local _org
  if [[ "${_repo_name}" == *"/"* ]]; then
    _fullname="${_repo_name}"
    _shortname=$(basename "${_fullname}")
  else
    _shortname="${_repo_name}"
    _fullname="${GITHUB_USER}/$_shortname"
  fi
  _org=$(dirname "${_fullname}")

  git_create_remote_repo "${_repo_name}" # created private by default

  yadm init -b "${_default_branch}"
  
  echo -e "# NEVER REMOVE THIS LINE BELOW\n.gitattributes !filter !diff" >> ~/.gitattributes; yadm add ~/.gitattributes # replace the yadm encryption mechanism by the git-crypt's one which does it transparently
  
  yadm commit -m "Initial commit"
  yadm remote add origin origin git@github.com:${_fullname}.git
  yadm remote -v # just to check everything looks good
  yadm push -u origin "${_default_branch}"
  yadm git-crypt init
  yadm git-crypt export-key /tmp/key
  log warn "Save the key below in a password manager:"
  cat /tmp/key | xxd -p
  command rm -f /tmp/key
}


# Not exposed via a git alias
function yadm_setup() {
  [[ " -h --help " == *" $1 "* ]] && helper "Restore a yadm config, pulling from an existing repo" \
    "repo fullname (shortname if you want a user repo)" \
    "branch" \
  && return
  
  [[ -z "${GITHUB_USER}" ]] && log error "You need to create a \$GITHUB_USER and you'll be requested a password which can be your Personal Access Token."

  local _repo_name="${1?Repo fullname missing}"
  local _default_branch="${2:-main}"

  local _fullname
  local _shortname
  local _org
  if [[ "${_repo_name}" == *"/"* ]]; then
    _fullname="${_repo_name}"
    _shortname=$(basename "${_fullname}")
  else
    _shortname="${_repo_name}"
    _fullname="${GITHUB_USER}/$_shortname"
  fi
  _org=$(dirname "${_fullname}")

  yadm clone -b "${_default_branch}" https://${GITHUB_USER}@github.com/${_fullname}
  yadm_unlock
}


# Not exposed via a git alias
function yadm_show_conflicts() {
  [[ " -h --help " == *" $1 "* ]] && helper "After a recent cloning, use this function if you have a conflict." \
  && return
  yadm stash show -p
}


# Not exposed via a git alias, it's up to you, I feel it risky as you could trigger it with a git <your alias> and mess around with your yadm config
function yadm_destroy() {
  [[ " -h --help " == *" $1 "* ]] && helper "Delete all your yadm local configuration, letting any existing remote safe" && return
  command rm -rf ~/.local/share/yadm ~/.config/yadm
  command rm -f ~/.gitattributes
}
